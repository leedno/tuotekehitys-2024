import pygame
import sys
from pygame.locals import *

class StartScreen:
    def __init__(self):
        pass

    def update(self): 
        pass

    def draw(self, screen):
        screen.fill((255, 255, 255))
        pygame.display.flip()

    def handle_events(self, events):
        for event in events:
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    return "game"
            elif event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

class GameScreen:
    def __init__(self):
        self.clock = pygame.time.Clock()
        self.width = 960
        self.height = 600
        self.dispSurf = pygame.display.set_mode((self.width, self.height))
        self.ball_radius = 20
        self.ball_color = (0, 0, 0)
        self.ball_pos = [self.width // 2, self.height // 2]
        self.ball_speed = 5

    def update(self):
        pass

    def draw(self):
        self.dispSurf.fill((255, 255, 255))  # Fill the screen with a white background
        pygame.draw.circle(self.dispSurf, self.ball_color, (int(self.ball_pos[0]), int(self.ball_pos[1])), self.ball_radius)
        pygame.display.flip()

    def handle_events(self, events):
        for event in events:
            if event.type == pygame.QUIT: 
                pygame.quit()
                sys.exit()
            if event.type == KEYDOWN:     
                if event.key == K_ESCAPE: 
                    pygame.quit()
                    sys.exit()
        keys = pygame.key.get_pressed()
        
        # Move the ball based on user input
        if keys[pygame.K_LEFT]:
            self.ball_pos[0] -= self.ball_speed
        if keys[pygame.K_RIGHT]:
            self.ball_pos[0] += self.ball_speed
        if keys[pygame.K_UP]:
            self.ball_pos[1] -= self.ball_speed
        if keys[pygame.K_DOWN]:
            self.ball_pos[1] += self.ball_speed

def main():
    pygame.init()

    screen = pygame.display.set_mode((960, 600))
    pygame.display.set_caption("Pygame Screen Manager")

    start_screen = StartScreen()
    game_screen = GameScreen()

    current_screen = "start"

    clock = pygame.time.Clock()

    while True:
        events = pygame.event.get()

        if current_screen == "start":
            screen.fill((255, 255, 255))  # Clear the screen
            start_screen.draw(screen)
            transition = start_screen.handle_events(events)
            if transition == "game":
                current_screen = "game"

        elif current_screen == "game":
            game_screen.handle_events(events)
            game_screen.draw()
        
        clock.tick(60)

if __name__ == "__main__":
    main()
